{"ast":null,"code":"import querystring from \"querystring\";\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\nconst getAccessToken = async () => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token\n    })\n  });\n  return response.json();\n};\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n  const {\n    access_token\n  } = await getAccessToken(client_id, client_secret, refresh_token);\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\nexport default async function getNowPlayingItem(client_id, client_secret, refresh_token) {\n  const response = await getNowPlaying(client_id, client_secret, refresh_token);\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n  const song = await response.json();\n  const albumImageUrl = song.item.album.images[0].url;\n  const artist = song.item.artists.map(_artist => _artist.name).join(\", \");\n  const isPlaying = song.is_playing;\n  const songUrl = song.item.external_urls.spotify;\n  const title = song.item.name;\n  return {\n    albumImageUrl,\n    artist,\n    isPlaying,\n    songUrl,\n    title\n  };\n}","map":{"version":3,"names":["querystring","NOW_PLAYING_ENDPOINT","TOKEN_ENDPOINT","client_id","process","env","SPOTIFY_CLIENT_ID","client_secret","SPOTIFY_CLIENT_SECRET","refresh_token","SPOTIFY_REFRESH_TOKEN","getAccessToken","basic","Buffer","from","toString","response","fetch","method","headers","Authorization","body","stringify","grant_type","json","getNowPlaying","access_token","getNowPlayingItem","status","song","albumImageUrl","item","album","images","url","artist","artists","map","_artist","name","join","isPlaying","is_playing","songUrl","external_urls","spotify","title"],"sources":["/Users/katieye/Desktop/my_portfolio/portfolio/src/lib/SpotifyAPI.js"],"sourcesContent":["import querystring from \"querystring\";\n\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\n\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\n\nconst getAccessToken = async () => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n  const { access_token } = await getAccessToken(\n    client_id,\n    client_secret,\n    refresh_token\n  );\n\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  });\n};\n\nexport default async function getNowPlayingItem(\n  client_id,\n  client_secret,\n  refresh_token\n) {\n  const response = await getNowPlaying(client_id, client_secret, refresh_token);\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n\n  const song = await response.json();\n  const albumImageUrl = song.item.album.images[0].url;\n  const artist = song.item.artists.map((_artist) => _artist.name).join(\", \");\n  const isPlaying = song.is_playing;\n  const songUrl = song.item.external_urls.spotify;\n  const title = song.item.name;\n\n  return {\n    albumImageUrl,\n    artist,\n    isPlaying,\n    songUrl,\n    title,\n  };\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,aAAa;AAErC,MAAMC,oBAAoB,GAAG,wDAAwD;AACrF,MAAMC,cAAc,GAAG,wCAAwC;AAE/D,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC/C,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,qBAAqB;AACvD,MAAMC,aAAa,GAAGL,OAAO,CAACC,GAAG,CAACK,qBAAqB;AAEvD,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAAC,GAAGX,SAAS,IAAII,aAAa,EAAE,CAAC,CAACQ,QAAQ,CAAC,QAAQ,CAAC;EAE7E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACf,cAAc,EAAE;IAC3CgB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,aAAa,EAAE,SAASR,KAAK,EAAE;MAC/B,cAAc,EAAE;IAClB,CAAC;IACDS,IAAI,EAAErB,WAAW,CAACsB,SAAS,CAAC;MAC1BC,UAAU,EAAE,eAAe;MAC3Bd;IACF,CAAC;EACH,CAAC,CAAC;EAEF,OAAOO,QAAQ,CAACQ,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOtB,SAAS,EAAEI,aAAa,EAAEE,aAAa,KAAK;EAC9E,MAAM;IAAEiB;EAAa,CAAC,GAAG,MAAMf,cAAc,CAC3CR,SAAS,EACTI,aAAa,EACbE,aACF,CAAC;EAED,OAAOQ,KAAK,CAAChB,oBAAoB,EAAE;IACjCkB,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUM,YAAY;IACvC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,eAAe,eAAeC,iBAAiBA,CAC7CxB,SAAS,EACTI,aAAa,EACbE,aAAa,EACb;EACA,MAAMO,QAAQ,GAAG,MAAMS,aAAa,CAACtB,SAAS,EAAEI,aAAa,EAAEE,aAAa,CAAC;EAC7E,IAAIO,QAAQ,CAACY,MAAM,KAAK,GAAG,IAAIZ,QAAQ,CAACY,MAAM,GAAG,GAAG,EAAE;IACpD,OAAO,KAAK;EACd;EAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,MAAMM,aAAa,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG;EACnD,MAAMC,MAAM,GAAGN,IAAI,CAACE,IAAI,CAACK,OAAO,CAACC,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1E,MAAMC,SAAS,GAAGZ,IAAI,CAACa,UAAU;EACjC,MAAMC,OAAO,GAAGd,IAAI,CAACE,IAAI,CAACa,aAAa,CAACC,OAAO;EAC/C,MAAMC,KAAK,GAAGjB,IAAI,CAACE,IAAI,CAACQ,IAAI;EAE5B,OAAO;IACLT,aAAa;IACbK,MAAM;IACNM,SAAS;IACTE,OAAO;IACPG;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}