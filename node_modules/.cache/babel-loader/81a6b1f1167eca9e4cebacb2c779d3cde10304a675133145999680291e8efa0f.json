{"ast":null,"code":"import querystring from 'querystring';\nimport { Buffer } from 'buffer';\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst RECENTLY_PLAYED_ENDPOINT = `https://api.spotify.com/v1/me/player/recently-played`;\nconst getAccessToken = async () => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token\n    })\n  });\n  return response.json();\n};\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n  const {\n    access_token\n  } = await getAccessToken(client_id, client_secret, refresh_token);\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\nexport const getRecentlyPlayed = async (client_id, client_secret, refresh_token) => {\n  const {\n    access_token\n  } = await getAccessToken(client_id, client_secret, refresh_token);\n  return fetch(RECENTLY_PLAYED_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\nexport default async function getNowPlayingItem(client_id, client_secret, refresh_token) {\n  const response = await getNowPlaying(client_id, client_secret, refresh_token);\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n  const song = await response.json();\n  const albumImageUrl = song.item.album.images[0].url;\n  const artist = song.item.artists.map(_artist => _artist.name).join(\", \");\n  const isPlaying = song.is_playing;\n  const songUrl = song.item.external_urls.spotify;\n  const title = song.item.name;\n  return {\n    albumImageUrl,\n    artist,\n    isPlaying,\n    songUrl,\n    title\n  };\n}\n{/*\n export default async function getRecentlyPlayedItems(\n    client_id,\n    client_secret,\n    refresh_token\n ) {\n    const response = await getRecentlyPlayed(client_id, client_secret, refresh_token);\n    if (response.status === 204 || response.status > 400) {\n        return false;\n    }    const {items} = await response.json();\n     const tracks = items.slice(0, 10).map((track) => ({\n        artist: track.artists.map((_artist) => _artist.name).join(', '),\n        songUrl: track.external_urls.spotify,\n        title: track.name,\n    }));\n     return tracks;\n }*/}","map":{"version":3,"names":["querystring","Buffer","client_id","process","env","SPOTIFY_CLIENT_ID","client_secret","SPOTIFY_CLIENT_SECRET","refresh_token","SPOTIFY_REFRESH_TOKEN","TOKEN_ENDPOINT","NOW_PLAYING_ENDPOINT","RECENTLY_PLAYED_ENDPOINT","getAccessToken","basic","from","toString","response","fetch","method","headers","Authorization","body","stringify","grant_type","json","getNowPlaying","access_token","getRecentlyPlayed","getNowPlayingItem","status","song","albumImageUrl","item","album","images","url","artist","artists","map","_artist","name","join","isPlaying","is_playing","songUrl","external_urls","spotify","title"],"sources":["/Users/katieye/Desktop/my_portfolio/portfolio/src/spotify/SpotifyAPI.js"],"sourcesContent":["import querystring from 'querystring';\nimport {Buffer} from 'buffer';\n\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\n\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst RECENTLY_PLAYED_ENDPOINT = `https://api.spotify.com/v1/me/player/recently-played`;\n\nconst getAccessToken = async () => {    const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");    const response = await fetch(TOKEN_ENDPOINT, {        method: \"POST\",\n    headers: {\n        Authorization: `Basic ${basic}`,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: querystring.stringify({\n        grant_type: \"refresh_token\",\n        refresh_token,\n    }),\n});\n\nreturn response.json();\n};\n\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n    const { access_token } = await getAccessToken(\n        client_id,\n        client_secret,\n        refresh_token\n    );    return fetch(NOW_PLAYING_ENDPOINT, {\n        headers: {\n            Authorization: `Bearer ${access_token}`,\n        },\n    });\n};\n\nexport const getRecentlyPlayed = async (client_id, client_secret, refresh_token) => {\n    const { access_token } = await getAccessToken(\n        client_id,\n        client_secret,\n        refresh_token\n    );    return fetch(RECENTLY_PLAYED_ENDPOINT, {\n        headers: {\n            Authorization: `Bearer ${access_token}`,\n        },\n    });\n};\n\nexport default async function getNowPlayingItem(\n    client_id,\n    client_secret,\n    refresh_token\n) {\n    const response = await getNowPlaying(client_id, client_secret, refresh_token);\n    if (response.status === 204 || response.status > 400) {\n        return false;\n    }    const song = await response.json();\n    const albumImageUrl = song.item.album.images[0].url;\n    const artist = song.item.artists.map((_artist) => _artist.name).join(\", \");\n    const isPlaying = song.is_playing;\n    const songUrl = song.item.external_urls.spotify;\n    const title = song.item.name;\n    \n    return {\n        albumImageUrl,\n        artist,\n        isPlaying,\n        songUrl,\n        title,\n    };\n}\n{/*\nexport default async function getRecentlyPlayedItems(\n    client_id,\n    client_secret,\n    refresh_token\n) {\n    const response = await getRecentlyPlayed(client_id, client_secret, refresh_token);\n    if (response.status === 204 || response.status > 400) {\n        return false;\n    }    const {items} = await response.json();\n\n    const tracks = items.slice(0, 10).map((track) => ({\n        artist: track.artists.map((_artist) => _artist.name).join(', '),\n        songUrl: track.external_urls.spotify,\n        title: track.name,\n    }));\n\n    return tracks;\n}*/}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}