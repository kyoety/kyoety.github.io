{"ast":null,"code":"import querystring from \"query-string\";\nimport { Buffer } from 'buffer';\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\nconst getAccessToken = async () => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token\n    })\n  });\n  return response.json();\n};\nexport const getNowPlaying = async (client_id, client_secret, refresh_token) => {\n  const {\n    access_token\n  } = await getAccessToken(client_id, client_secret, refresh_token);\n  return fetch(NOW_PLAYING_ENDPOINT, {\n    headers: {\n      Authorization: `Bearer ${access_token}`\n    }\n  });\n};\nexport default async function getNowPlayingItem(client_id, client_secret, refresh_token) {\n  const response = await getNowPlaying(client_id, client_secret, refresh_token);\n  if (response.status === 204 || response.status > 400) {\n    return false;\n  }\n  const song = await response.json();\n  const isPlaying = song.is_playing;\n  const title = song.item.name;\n  const artist = song.item.artists.map(_artist => _artist.name).join(\", \");\n  const album = song.item.album.name;\n  const albumImageUrl = song.item.album.images[0].url;\n  const songUrl = song.item.external_urls.spotify;\n  return {\n    album,\n    albumImageUrl,\n    artist,\n    isPlaying,\n    songUrl,\n    title\n  };\n}","map":{"version":3,"names":["querystring","Buffer","NOW_PLAYING_ENDPOINT","TOKEN_ENDPOINT","client_id","process","env","SPOTIFY_CLIENT_ID","client_secret","SPOTIFY_CLIENT_SECRET","refresh_token","SPOTIFY_REFRESH_TOKEN","getAccessToken","basic","from","toString","response","fetch","method","headers","Authorization","body","stringify","grant_type","json","getNowPlaying","access_token","getNowPlayingItem","status","song","isPlaying","is_playing","title","item","name","artist","artists","map","_artist","join","album","albumImageUrl","images","url","songUrl","external_urls","spotify"],"sources":["/Users/katieye/Desktop/my_portfolio/portfolio/src/lib/SpotifyAPI.js"],"sourcesContent":["import querystring from \"query-string\";\nimport {Buffer} from 'buffer';\n\nconst NOW_PLAYING_ENDPOINT = `https://api.spotify.com/v1/me/player/currently-playing`;\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\n\nconst client_id = process.env.SPOTIFY_CLIENT_ID;\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET;\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN;\n\nconst getAccessToken = async () => {\n  const basic = Buffer.from(`${client_id}:${client_secret}`).toString(\"base64\");\n\n  const response = await fetch(TOKEN_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${basic}`,\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n    body: querystring.stringify({\n      grant_type: \"refresh_token\",\n      refresh_token,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const getNowPlaying = async (\n    client_id,\n    client_secret,\n    refresh_token\n  ) => {\n    const { access_token } = await getAccessToken(\n      client_id,\n      client_secret,\n      refresh_token\n    );\n    \n  \n    return fetch(NOW_PLAYING_ENDPOINT, {\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n      },\n    });\n  };\n  \nexport default async function getNowPlayingItem(\n    client_id,\n    client_secret,\n    refresh_token\n) {\n    const response = await getNowPlaying(client_id, client_secret, refresh_token);\n    if (response.status === 204 || response.status > 400) {\n      return false;\n    }\n  \n    const song = await response.json();\n    const isPlaying = song.is_playing;\n    const title = song.item.name;\n    const artist = song.item.artists.map((_artist) => _artist.name).join(\", \");\n    const album = song.item.album.name;\n    const albumImageUrl = song.item.album.images[0].url;\n    const songUrl = song.item.external_urls.spotify;\n  \n    return {\n      album,\n      albumImageUrl,\n      artist,\n      isPlaying,\n      songUrl,\n      title,\n    };\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,cAAc;AACtC,SAAQC,MAAM,QAAO,QAAQ;AAE7B,MAAMC,oBAAoB,GAAG,wDAAwD;AACrF,MAAMC,cAAc,GAAG,wCAAwC;AAE/D,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC/C,MAAMC,aAAa,GAAGH,OAAO,CAACC,GAAG,CAACG,qBAAqB;AACvD,MAAMC,aAAa,GAAGL,OAAO,CAACC,GAAG,CAACK,qBAAqB;AAEvD,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,KAAK,GAAGZ,MAAM,CAACa,IAAI,CAAC,GAAGV,SAAS,IAAII,aAAa,EAAE,CAAC,CAACO,QAAQ,CAAC,QAAQ,CAAC;EAE7E,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACd,cAAc,EAAE;IAC3Ce,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,aAAa,EAAE,SAASP,KAAK,EAAE;MAC/B,cAAc,EAAE;IAClB,CAAC;IACDQ,IAAI,EAAErB,WAAW,CAACsB,SAAS,CAAC;MAC1BC,UAAU,EAAE,eAAe;MAC3Bb;IACF,CAAC;EACH,CAAC,CAAC;EAEF,OAAOM,QAAQ,CAACQ,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CACzBrB,SAAS,EACTI,aAAa,EACbE,aAAa,KACV;EACH,MAAM;IAAEgB;EAAa,CAAC,GAAG,MAAMd,cAAc,CAC3CR,SAAS,EACTI,aAAa,EACbE,aACF,CAAC;EAGD,OAAOO,KAAK,CAACf,oBAAoB,EAAE;IACjCiB,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUM,YAAY;IACvC;EACF,CAAC,CAAC;AACJ,CAAC;AAEH,eAAe,eAAeC,iBAAiBA,CAC3CvB,SAAS,EACTI,aAAa,EACbE,aAAa,EACf;EACE,MAAMM,QAAQ,GAAG,MAAMS,aAAa,CAACrB,SAAS,EAAEI,aAAa,EAAEE,aAAa,CAAC;EAC7E,IAAIM,QAAQ,CAACY,MAAM,KAAK,GAAG,IAAIZ,QAAQ,CAACY,MAAM,GAAG,GAAG,EAAE;IACpD,OAAO,KAAK;EACd;EAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,MAAMM,SAAS,GAAGD,IAAI,CAACE,UAAU;EACjC,MAAMC,KAAK,GAAGH,IAAI,CAACI,IAAI,CAACC,IAAI;EAC5B,MAAMC,MAAM,GAAGN,IAAI,CAACI,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACJ,IAAI,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC;EAC1E,MAAMC,KAAK,GAAGX,IAAI,CAACI,IAAI,CAACO,KAAK,CAACN,IAAI;EAClC,MAAMO,aAAa,GAAGZ,IAAI,CAACI,IAAI,CAACO,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG;EACnD,MAAMC,OAAO,GAAGf,IAAI,CAACI,IAAI,CAACY,aAAa,CAACC,OAAO;EAE/C,OAAO;IACLN,KAAK;IACLC,aAAa;IACbN,MAAM;IACNL,SAAS;IACTc,OAAO;IACPZ;EACF,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}