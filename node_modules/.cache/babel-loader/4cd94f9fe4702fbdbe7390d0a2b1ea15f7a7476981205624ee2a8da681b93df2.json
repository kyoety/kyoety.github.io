{"ast":null,"code":"import { useState as P, useCallback as D } from \"react\";\nconst g = ({\n    root: t,\n    particles: e,\n    decay: s,\n    lifetime: a,\n    updateParticle: c,\n    onFinish: o\n  }) => {\n    const i = a;\n    let l = 0;\n    const n = () => {\n      e.forEach(C => c(C, l / i, s)), l += 1, l < i ? window.requestAnimationFrame(n) : (e.forEach(C => {\n        if (C.element.parentNode === t) return t.removeChild(C.element);\n      }), o());\n    };\n    window.requestAnimationFrame(n);\n  },\n  {\n    PI: b\n  } = Math,\n  A = t => t * (b / 180),\n  w = (t, e) => {\n    const s = Math.ceil(t),\n      a = Math.floor(e);\n    return Math.floor(Math.random() * (a - s)) + s;\n  },\n  x = (t, e, s, a) => {\n    const c = A(t),\n      o = A(e),\n      {\n        random: i\n      } = Math;\n    return {\n      x: 0,\n      y: 0,\n      z: 0,\n      height: 0,\n      wobble: i() * 10,\n      velocity: s * .5 + i() * s,\n      angle2D: -c + (.5 * o - i() * o),\n      angle3D: -(b / 4) + i() * (b / 2),\n      tiltAngle: i() * b,\n      differentiator: a\n    };\n  },\n  H = t => {\n    const e = document.getElementById(t);\n    return e || console.error(`Element with an ID of ${t} could not be found. Please provide a valid ID.`), e;\n  },\n  B = [\"#A45BF1\", \"#25C6F6\", \"#72F753\", \"#F76C88\", \"#F5F770\"],\n  F = [-.6, -.3, 0, .3, .6],\n  S = (t, e, s, a, c, o) => Array.from({\n    length: e\n  }).map((i, l) => {\n    const n = document.createElement(\"span\");\n    return n.style[\"background-color\"] = o[l % o.length], n.style.width = `${s}px`, n.style.height = `${s}px`, n.style.position = c, n.style.zIndex = `${a}`, t.appendChild(n), {\n      element: n,\n      differentiator: w(0, F.length)\n    };\n  }),\n  Z = (t, e, s) => {\n    const {\n      x: a,\n      y: c,\n      tiltAngle: o,\n      wobble: i,\n      angle2D: l,\n      angle3D: n,\n      velocity: C,\n      differentiator: r\n    } = t.physics;\n    t.physics.x += Math.cos(l) * C, t.physics.y += Math.sin(l) * C, t.physics.z += Math.sin(n) * C, t.physics.wobble += .05, t.physics.velocity *= s, t.physics.y += 3.5, t.physics.tiltAngle += .15;\n    const h = a + (F[r] * e * i * i + 20 * (r % 2 ? Math.sin(i / 4) : Math.cos(i / 4))),\n      y = c + 5 * Math.sin(i);\n    t.element.style.transform = `translate3d(${h}px, ${y}px, 0) rotate3d(1, 1, 1, ${r % 2 ? o : -1 * o}rad)`, t.element.style.scale = `${1 - .2 * e}`, e > .5 && (t.element.style.opacity = `${2 - 2 * e}`);\n  },\n  v = (t, e, s) => {\n    const a = s || {},\n      {\n        elementCount: c = 50,\n        elementSize: o = 8,\n        colors: i = B,\n        angle: l = 90,\n        spread: n = 45,\n        decay: C = .94,\n        lifetime: r = 200,\n        startVelocity: h = 35,\n        zIndex: y = 0,\n        position: m = \"fixed\",\n        onAnimationComplete: d\n      } = a,\n      f = S(t, c, o, y, m, i).map(({\n        element: p,\n        differentiator: u\n      }) => ({\n        element: p,\n        physics: x(l, n, h, u)\n      }));\n    g({\n      root: t,\n      particles: f,\n      decay: C,\n      lifetime: r,\n      updateParticle: Z,\n      onFinish: () => {\n        typeof d == \"function\" && d(), e();\n      }\n    });\n  },\n  j = [\"\\u{1F913}\", \"\\u{1F60A}\", \"\\u{1F973}\"],\n  E = [-.6, -.3, 0, .3, .6],\n  T = (t, e, s, a, c, o) => Array.from({\n    length: e\n  }).map((i, l) => {\n    const n = document.createElement(\"span\");\n    return n.innerHTML = o[l % o.length], n.style.fontSize = `${s + w(0, 4)}px`, n.style.position = c, n.style.zIndex = `${a}`, t.appendChild(n), {\n      element: n,\n      differentiator: w(0, E.length)\n    };\n  }),\n  V = (t, e, s) => {\n    const {\n      x: a,\n      y: c,\n      tiltAngle: o,\n      angle2D: i,\n      velocity: l,\n      differentiator: n,\n      wobble: C\n    } = t.physics;\n    t.physics.x += Math.cos(i) * l, t.physics.y += Math.sin(i) * l, t.physics.wobble += 0, t.physics.velocity *= s, t.physics.y += 5, t.physics.tiltAngle += .05;\n    const r = a + (E[n] * e * C * C + 20 * Math.sin(C / 4));\n    t.element.style.transform = `translate3d(${r}px, ${c}px, 0) rotate3d(0, 0, 1, ${n % 2 ? o : -1 * o}rad)`, e > .5 && (t.element.style.opacity = `${2 - 2 * e}`);\n  },\n  k = (t, e, s) => {\n    const a = s || {},\n      {\n        elementCount: c = 20,\n        elementSize: o = 25,\n        emoji: i = j,\n        angle: l = 90,\n        spread: n = 45,\n        decay: C = .94,\n        lifetime: r = 200,\n        startVelocity: h = 35,\n        zIndex: y = 0,\n        position: m = \"fixed\",\n        onAnimationComplete: d\n      } = a,\n      f = T(t, c, o, y, m, i).map(({\n        element: p,\n        differentiator: u\n      }) => ({\n        element: p,\n        physics: x(l, n, h, u)\n      }));\n    g({\n      root: t,\n      particles: f,\n      decay: C,\n      lifetime: r,\n      updateParticle: V,\n      onFinish: () => {\n        typeof d == \"function\" && d(), e();\n      }\n    });\n  };\nvar L = `<svg width=\"100%\" viewBox=\"0 0 976 3040\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M489.693 1269.49C489.773 1378.79 410.493 1466.8 389.107 1571.11C384.147 1595.33 382.893 1620.12 386.187 1644.64C389.44 1668.83 399.28 1691.16 409.04 1713.29C419.253 1736.44 429.28 1760.11 429.453 1785.83C429.64 1812.27 416.307 1836.8 408.933 1861.59C396 1905.15 409.613 1948.88 425.213 1989.73C442.04 2033.83 461.387 2077.87 456.6 2126.17C453.92 2153.15 444.147 2179.13 434.2 2204.13C424.173 2229.35 413.72 2254.28 405.507 2280.17C389.213 2331.51 379.493 2385.83 378.267 2439.72C377.693 2464.89 380.333 2490.25 388.667 2514.11C397.053 2538.09 412.6 2558.75 424.733 2580.84C449.907 2626.64 458.453 2681 451.053 2732.52C443.853 2782.56 414.227 2825.99 408.893 2876.35C404.44 2918.39 416.733 2961.63 440.08 2996.53C450.373 3011.91 463.267 3025.44 477.867 3036.75C480.773 3039 484.88 3034.95 481.947 3032.68C446.147 3004.96 423.24 2964.2 415.907 2919.71C412.107 2896.61 413.627 2872.95 419.427 2850.35C426.053 2824.51 438.067 2800.36 446.667 2775.17C462.44 2729 463.147 2678.51 450.92 2631.45C444.733 2607.64 434.453 2585.4 421.893 2564.32C407.933 2540.91 394.307 2518.68 388.32 2491.71C382.493 2465.45 383.413 2438 385.56 2411.37C387.853 2382.85 392.467 2354.56 398.827 2326.67C405 2299.61 413.253 2273.05 423.107 2247.12C432.533 2222.27 443.533 2198.05 451.867 2172.8C459.707 2149.04 464.387 2124.29 463 2099.23C461.773 2077.19 455.64 2055.65 448.467 2034.89C433.587 1991.8 411.307 1949.77 409.413 1903.37C408.36 1877.76 417.12 1854.67 425.587 1830.97C433.68 1808.33 437.44 1786.41 432.787 1762.6C428.307 1739.63 417.333 1718.23 408.12 1696.91C397.267 1671.77 390.413 1646.41 390.013 1618.89C388.387 1509.52 469.707 1420.85 490.813 1316.72C493.973 1301.19 495.467 1285.33 495.453 1269.49C495.453 1265.77 489.693 1265.77 489.693 1269.49\" stroke=\"#7A7E82\" stroke-width=\"4\"/>\n<path d=\"M555.653 1298.41H423.52C415.173 1298.41 408.413 1305.17 408.413 1313.52C408.413 1321.85 415.173 1328.63 423.52 1328.63H555.653C564 1328.63 570.76 1321.85 570.76 1313.52C570.76 1305.17 564 1298.41 555.653 1298.41Z\" fill=\"currentColor\"/>\n<path d=\"M555.653 1298.41H423.52C415.173 1298.41 408.413 1305.17 408.413 1313.52C408.413 1321.85 415.173 1328.63 423.52 1328.63H555.653C564 1328.63 570.76 1321.85 570.76 1313.52C570.76 1305.17 564 1298.41 555.653 1298.41Z\" fill=\"black\" fill-opacity=\"0.1\"/>\n<path d=\"M975.133 528.947C975.133 820.667 756.973 1255.43 487.853 1255.43C218.733 1255.43 0.559814 820.667 0.559814 528.947C0.559814 237.227 218.733 0.733359 487.853 0.733359C756.973 0.733359 975.133 237.227 975.133 528.947Z\" fill=\"currentColor\"/>\n<path d=\"M549.04 1298.41C531.293 1285.91 519.893 1269.95 512.587 1254.2C504.387 1255.01 496.147 1255.43 487.853 1255.43C481.04 1255.43 474.28 1255.15 467.546 1254.6C460.226 1270.21 448.867 1286.01 431.253 1298.41H549.04Z\" fill=\"currentColor\"/>\n<path d=\"M211.413 569.213C193.787 569.213 175.947 564.4 160.92 555.24C128.133 535.293 108.133 498.56 101.147 460.827C97.0133 438.533 96.9468 415.827 99.1068 393.214C120.627 308.28 168.453 234.48 233.467 183.733C246.947 173.213 261.16 163.693 276.027 155.267C280.347 152.813 284.72 150.467 289.147 148.2C291.707 147.373 294.347 146.92 297.12 146.92C301.347 146.92 305.907 147.974 311.067 150.414C332.773 160.64 334.36 192.213 323.693 213.72C313.04 235.226 294.187 251.8 283.413 273.253C262 315.88 276.48 366.707 287.347 413.147C298.213 459.6 302.427 515.373 267.8 548.187C252.707 562.48 232.227 569.213 211.413 569.213\" fill=\"white\" fill-opacity=\"0.2\"/>\n<path d=\"M785.133 110.4C863.72 204.187 911.613 328.747 911.613 465.414C911.613 757.147 693.44 1191.89 424.32 1191.89C350.973 1191.89 281.413 1159.6 219.013 1106.71C296.067 1196.16 388.48 1255.43 487.853 1255.43C756.973 1255.43 975.133 820.667 975.133 528.947C975.133 358.547 900.693 206.987 785.133 110.4Z\" fill=\"black\" fill-opacity=\"0.1\"/>\n</svg>`;\nconst R = [\"#A45BF1\", \"#25C6F6\", \"#72F753\", \"#F76C88\", \"#F5F770\"],\n  I = [-.6, -.3, 0, .3, .6],\n  X = (t, e, s) => {\n    e.parentNode === s && s.removeChild(e);\n  },\n  _ = (t, e, s, a, c, o) => Array.from({\n    length: e\n  }).map((i, l) => {\n    const n = document.createElement(\"span\");\n    return n.innerHTML = L, n.style.width = `${s}px`, n.style.position = c, n.style.color = o[l % o.length], n.style.zIndex = `${a}`, n.addEventListener(\"click\", C => {\n      X(C, n, t);\n    }, {\n      once: !0\n    }), t.appendChild(n), {\n      element: n,\n      differentiator: w(0, I.length)\n    };\n  }),\n  q = (t, e, s) => {\n    const {\n      x: a,\n      y: c,\n      tiltAngle: o,\n      angle2D: i,\n      velocity: l,\n      differentiator: n,\n      wobble: C\n    } = t.physics;\n    t.physics.x += Math.cos(i) * .5 * l, t.physics.y += Math.sin(i) * .5 * l, t.physics.wobble += 0, t.physics.velocity *= s, t.physics.tiltAngle += .1;\n    const r = a + (I[n] * e * C * C + 20 * Math.sin(C));\n    t.element.style.transform = `translate3d(${r}px, ${c}px, 0) rotate3d(0, 0, 1, ${n % 2 ? Math.sin(o / 4) / 3 : Math.cos(o / 4) / 3}rad)`, t.element.style.scale = `${1 - .2 * e}`, e > .5 && (t.element.style.opacity = `${2 - 2 * e}`);\n  },\n  z = (t, e, s) => {\n    const a = s || {},\n      {\n        angle: c = 90,\n        decay: o = .999,\n        spread: i = 50,\n        startVelocity: l = 3,\n        elementCount: n = 10,\n        elementSize: C = 20,\n        lifetime: r = 600,\n        zIndex: h = 0,\n        position: y = \"fixed\",\n        colors: m = R,\n        onAnimationComplete: d\n      } = a,\n      f = _(t, n, C, h, y, m).map(({\n        element: p,\n        differentiator: u\n      }) => ({\n        element: p,\n        physics: x(c, i, l, u)\n      }));\n    g({\n      root: t,\n      particles: f,\n      decay: o,\n      lifetime: r,\n      updateParticle: q,\n      onFinish: () => {\n        typeof d == \"function\" && d(), e();\n      }\n    });\n  },\n  N = (t, e, s) => {\n    const [a, c] = P(!1),\n      o = () => {\n        c(!1);\n      };\n    return {\n      reward: D(() => {\n        const l = H(t);\n        if (!!l) switch (c(!0), e) {\n          case \"confetti\":\n            v(l, o, s);\n            break;\n          case \"emoji\":\n            k(l, o, s);\n            break;\n          case \"balloons\":\n            z(l, o, s);\n            break;\n          default:\n            console.error(`${e} is not a valid react-rewards type.`);\n        }\n      }, [s, t, e]),\n      isAnimating: a\n    };\n  };\nexport { z as balloons, v as confetti, k as emoji, N as useReward };","map":{"version":3,"names":["R","I","X","t","e","s","parentNode","removeChild","_","a","c","o","Array","from","length","map","i","l","n","document","createElement","innerHTML","L","style","width","position","color","zIndex","addEventListener","C","once","appendChild","element","differentiator","w","q","x","y","tiltAngle","angle2D","velocity","wobble","physics","Math","cos","sin","r","transform","scale","opacity","z","angle","decay","spread","startVelocity","elementCount","elementSize","lifetime","h","colors","m","onAnimationComplete","d","f","p","u","g","root","particles","updateParticle","onFinish","N","P","reward","D","H","v","k","console","error","isAnimating","balloons","confetti","emoji","useReward"],"sources":["/Users/katieye/Desktop/my_portfolio/portfolio/node_modules/react-rewards/src/functions/helpers.ts","/Users/katieye/Desktop/my_portfolio/portfolio/node_modules/react-rewards/src/components/Confetti/Confetti.ts","/Users/katieye/Desktop/my_portfolio/portfolio/node_modules/react-rewards/src/components/Emoji/Emoji.ts","/Users/katieye/Desktop/my_portfolio/portfolio/node_modules/react-rewards/src/components/Balloons/Balloons.ts","/Users/katieye/Desktop/my_portfolio/portfolio/node_modules/react-rewards/src/hooks/useReward.ts"],"sourcesContent":["import { AnimateFunction } from './helpers.types';\n\nexport const animate: AnimateFunction = ({\n  root,\n  particles,\n  decay,\n  lifetime,\n  updateParticle,\n  onFinish,\n}) => {\n  const totalTicks = lifetime;\n  let tick = 0;\n\n  const update = () => {\n    particles.forEach((particle) =>\n      updateParticle(particle, tick / totalTicks, decay)\n    );\n\n    tick += 1;\n    if (tick < totalTicks) {\n      window.requestAnimationFrame(update);\n    } else {\n      particles.forEach((particle) => {\n        if (particle.element.parentNode === root) {\n          return root.removeChild(particle.element);\n        }\n      });\n      onFinish();\n    }\n  };\n\n  window.requestAnimationFrame(update);\n};\n\nexport const { PI } = Math;\n\nexport const degreesToRadians = (degrees: number) => degrees * (PI / 180);\n\nexport const getRandomInt = (min: number, max: number) => {\n  const minVal = Math.ceil(min);\n  const maxVal = Math.floor(max);\n  return Math.floor(Math.random() * (maxVal - minVal)) + minVal;\n};\n\nexport const generatePhysics = (\n  angle: number,\n  spread: number,\n  startVelocity: number,\n  differentiator: number\n) => {\n  const radAngle = degreesToRadians(angle);\n  const radSpread = degreesToRadians(spread);\n  const { random } = Math;\n  return {\n    x: 0,\n    y: 0,\n    z: 0,\n    height: 0,\n    wobble: random() * 10,\n    velocity: startVelocity * 0.5 + random() * startVelocity,\n    angle2D: -radAngle + (0.5 * radSpread - random() * radSpread),\n    angle3D: -(PI / 4) + random() * (PI / 2),\n    tiltAngle: random() * PI,\n    differentiator,\n  };\n};\n\nexport const getContainerById = (id: string) => {\n  const container = document.getElementById(id);\n  if (!container) {\n    console.error(\n      `Element with an ID of ${id} could not be found. Please provide a valid ID.`\n    );\n  }\n  return container;\n};\n","import { ConfettiConfig } from './Confetti.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\n\nconst defaultColors = ['#A45BF1', '#25C6F6', '#72F753', '#F76C88', '#F5F770'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  colors: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.style['background-color'] = colors[index % colors.length];\n    element.style.width = `${elementSize}px`;\n    element.style.height = `${elementSize}px`;\n    element.style.position = position;\n    element.style.zIndex = `${zIndex}`;\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const {\n    x,\n    y,\n    tiltAngle,\n    wobble,\n    angle2D,\n    angle3D,\n    velocity,\n    differentiator,\n  } = particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * velocity;\n  particle.physics.y += Math.sin(angle2D) * velocity;\n  particle.physics.z += Math.sin(angle3D) * velocity;\n  particle.physics.wobble += 0.05;\n  particle.physics.velocity *= decay;\n  particle.physics.y += 3.5;\n  particle.physics.tiltAngle += 0.15;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * (differentiator % 2 ? Math.sin(wobble / 4) : Math.cos(wobble / 4)));\n\n  const wobbleY = y + 5 * Math.sin(wobble);\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${wobbleY}px, 0) rotate3d(1, 1, 1, ${\n    differentiator % 2 ? tiltAngle : -1 * tiltAngle\n  }rad)`;\n  particle.element.style.scale = `${1 - 0.2 * progress}`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const confetti = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: ConfettiConfig\n) => {\n  const options = config || {};\n  const {\n    elementCount = 50,\n    elementSize = 8,\n    colors = defaultColors,\n    angle = 90,\n    spread = 45,\n    decay = 0.94,\n    lifetime = 200,\n    startVelocity = 35,\n    zIndex = 0,\n    position = 'fixed',\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    colors\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({\n    root,\n    particles,\n    decay,\n    lifetime,\n    updateParticle,\n    onFinish,\n  });\n};\n","import { EmojiConfig } from './Emoji.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\n\nconst defaultEmoji = ['🤓', '😊', '🥳'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  emojis: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.innerHTML = emojis[index % emojis.length];\n    element.style.fontSize = `${elementSize + getRandomInt(0, 4)}px`;\n    element.style.position = position;\n    element.style.zIndex = `${zIndex}`;\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const { x, y, tiltAngle, angle2D, velocity, differentiator, wobble } =\n    particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * velocity;\n  particle.physics.y += Math.sin(angle2D) * velocity;\n  particle.physics.wobble += 0;\n  particle.physics.velocity *= decay;\n  particle.physics.y += 5;\n  particle.physics.tiltAngle += 0.05;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * Math.sin(wobble / 4));\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${y}px, 0) rotate3d(0, 0, 1, ${\n    differentiator % 2 ? tiltAngle : -1 * tiltAngle\n  }rad)`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const emoji = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: EmojiConfig\n) => {\n  const options = config || {};\n  const {\n    elementCount = 20,\n    elementSize = 25,\n    emoji: emojiArray = defaultEmoji,\n    angle = 90,\n    spread = 45,\n    decay = 0.94,\n    lifetime = 200,\n    startVelocity = 35,\n    zIndex = 0,\n    position = 'fixed',\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    emojiArray\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({\n    root,\n    particles,\n    decay,\n    lifetime,\n    updateParticle,\n    onFinish,\n  });\n};\n","import { BalloonsConfig } from './Balloons.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\nimport balloon from './balloon.svg';\n\nconst defaultColors = ['#A45BF1', '#25C6F6', '#72F753', '#F76C88', '#F5F770'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst handlePopBalloon = (\n  event: MouseEvent,\n  element: Element,\n  root: Element\n) => {\n  if (element.parentNode === root) {\n    root.removeChild(element);\n  }\n};\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  colors: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.innerHTML = balloon;\n    element.style.width = `${elementSize}px`;\n    element.style.position = position;\n    element.style.color = colors[index % colors.length];\n    element.style.zIndex = `${zIndex}`;\n    element.addEventListener(\n      'click',\n      (event: MouseEvent) => {\n        handlePopBalloon(event, element, root);\n      },\n      { once: true }\n    );\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const { x, y, tiltAngle, angle2D, velocity, differentiator, wobble } =\n    particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * 0.5 * velocity;\n  particle.physics.y += Math.sin(angle2D) * 0.5 * velocity;\n  particle.physics.wobble += 0;\n  particle.physics.velocity *= decay;\n  particle.physics.tiltAngle += 0.1;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * Math.sin(wobble));\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${y}px, 0) rotate3d(0, 0, 1, ${\n    differentiator % 2\n      ? Math.sin(tiltAngle / 4) / 3\n      : Math.cos(tiltAngle / 4) / 3\n  }rad)`;\n  particle.element.style.scale = `${1 - 0.2 * progress}`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const balloons = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: BalloonsConfig\n) => {\n  const options = config || {};\n  const {\n    angle = 90,\n    decay = 0.999,\n    spread = 50,\n    startVelocity = 3,\n    elementCount = 10,\n    elementSize = 20,\n    lifetime = 600,\n    zIndex = 0,\n    position = 'fixed',\n    colors = defaultColors,\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    colors\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({ root, particles, decay, lifetime, updateParticle, onFinish });\n};\n","import { useCallback, useState } from 'react';\nimport { confetti } from '../components/Confetti/Confetti';\nimport { emoji } from '../components/Emoji/Emoji';\nimport { balloons } from '../components/Balloons/Balloons';\nimport { UseRewardType } from './useReward.types';\nimport { getContainerById } from '../functions/helpers';\n\nexport const useReward: UseRewardType = (id, type, config) => {\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n  const internalAnimatingCallback = () => {\n    setIsAnimating(false);\n  };\n\n  const reward = useCallback(() => {\n    const foundContainer = getContainerById(id);\n    if (!foundContainer) return;\n    setIsAnimating(true);\n    switch (type) {\n      case 'confetti':\n        confetti(foundContainer, internalAnimatingCallback, config);\n        break;\n      case 'emoji':\n        emoji(foundContainer, internalAnimatingCallback, config);\n        break;\n      case 'balloons':\n        balloons(foundContainer, internalAnimatingCallback, config);\n        break;\n      default:\n        console.error(`${type} is not a valid react-rewards type.`);\n    }\n  }, [config, id, type]);\n\n  return { reward, isAnimating };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}